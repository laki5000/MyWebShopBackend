services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - mynetwork

  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "8081:8081"
    volumes:
      - ./Microservices/AuthService/AuthService.Shared/Settings/appsettings.jwt.json:/app/appsettings.jwt.json:ro
    networks:
      - mynetwork

  authservice:
    image: ${DOCKER_REGISTRY-}authservice
    build:
      context: .
      dockerfile: Microservices/AuthService/AuthService.App/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=5000
    expose:
      - "5000"
    volumes:
      - ./Microservices/AuthService/AuthService.Shared/Settings/appsettings.jwt.json:/app/appsettings.jwt.json:ro
      - ./Shared/Settings/appsettings.grpc.json:/app/appsettings.grpc.json:ro
    networks:
      - mynetwork

  userservice:
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: Microservices/UserService/UserService.App/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=5000
    expose:
      - "5000"
    volumes:
      - ./Shared/Settings/appsettings.grpc.json:/app/appsettings.grpc.json:ro
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
